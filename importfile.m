function D6MHCLnewmod = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   D6MHCLNEWMOD = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   D6MHCLNEWMOD = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   D6MHCLnewmod = importfile('011117 D6 MHC L - new mod.csv', 2, 3327);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/09 14:22:25
%%

% Prompt for a file if not input
if nargin == 0
    [file, path] = uigetfile('*.*', 'Choose a file to open');
    filename = [path file];
    if isequal(path, 0) || isequal(file, 0), return; end
end



%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,6,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,6,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]);
rawCellColumns = raw(:, [4,5,7,8,9,10,11,12,13,14,15,16,17,18,23]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
D6MHCLnewmod = table;
D6MHCLnewmod.RelTimes = cell2mat(rawNumericColumns(:, 1));
D6MHCLnewmod.TrackID = cell2mat(rawNumericColumns(:, 2));
D6MHCLnewmod.ID = cell2mat(rawNumericColumns(:, 3));
D6MHCLnewmod.ItemName = rawCellColumns(:, 1);
D6MHCLnewmod.Name = rawCellColumns(:, 2);
D6MHCLnewmod.Population = cell2mat(rawNumericColumns(:, 4));
D6MHCLnewmod.Type = rawCellColumns(:, 3);
D6MHCLnewmod.Length = rawCellColumns(:, 4);
D6MHCLnewmod.Lengthm = rawCellColumns(:, 5);
D6MHCLnewmod.TimeSpan = rawCellColumns(:, 6);
D6MHCLnewmod.TrackVelocity = rawCellColumns(:, 7);
D6MHCLnewmod.TrackVelocitymsec = rawCellColumns(:, 8);
D6MHCLnewmod.Displacement = rawCellColumns(:, 9);
D6MHCLnewmod.Displacementm = rawCellColumns(:, 10);
D6MHCLnewmod.DisplacementRate = rawCellColumns(:, 11);
D6MHCLnewmod.DisplacementRatemsec = rawCellColumns(:, 12);
D6MHCLnewmod.MeanderingIndex = rawCellColumns(:, 13);
D6MHCLnewmod.MeanderingIndexCal = rawCellColumns(:, 14);
D6MHCLnewmod.Angledegrees = cell2mat(rawNumericColumns(:, 5));
D6MHCLnewmod.Bearingdegrees = cell2mat(rawNumericColumns(:, 6));
D6MHCLnewmod.Elevationdegrees = cell2mat(rawNumericColumns(:, 7));
D6MHCLnewmod.Timepoint = cell2mat(rawNumericColumns(:, 8));
D6MHCLnewmod.AbsTime = rawCellColumns(:, 15);
D6MHCLnewmod.Distance = cell2mat(rawNumericColumns(:, 9));
D6MHCLnewmod.Velocity = cell2mat(rawNumericColumns(:, 10));
D6MHCLnewmod.Distancem = cell2mat(rawNumericColumns(:, 11));
D6MHCLnewmod.Velocitymsec = cell2mat(rawNumericColumns(:, 12));
D6MHCLnewmod.Delta2 = cell2mat(rawNumericColumns(:, 13));
D6MHCLnewmod.Delta2m2 = cell2mat(rawNumericColumns(:, 14));
D6MHCLnewmod.RelCentroidX = cell2mat(rawNumericColumns(:, 15));
D6MHCLnewmod.RelCentroidY = cell2mat(rawNumericColumns(:, 16));
D6MHCLnewmod.RelCentroidZ = cell2mat(rawNumericColumns(:, 17));
D6MHCLnewmod.RelCentroidXm = cell2mat(rawNumericColumns(:, 18));
D6MHCLnewmod.RelCentroidYm = cell2mat(rawNumericColumns(:, 19));
D6MHCLnewmod.RelCentroidZm = cell2mat(rawNumericColumns(:, 20));
D6MHCLnewmod.VoxelCount = cell2mat(rawNumericColumns(:, 21));
D6MHCLnewmod.Volumem3 = cell2mat(rawNumericColumns(:, 22));
D6MHCLnewmod.MinRXD1 = cell2mat(rawNumericColumns(:, 23));
D6MHCLnewmod.MaxRXD1 = cell2mat(rawNumericColumns(:, 24));
D6MHCLnewmod.MeanRXD1 = cell2mat(rawNumericColumns(:, 25));
D6MHCLnewmod.SumRXD1 = cell2mat(rawNumericColumns(:, 26));
D6MHCLnewmod.StandardDeviationRXD1 = cell2mat(rawNumericColumns(:, 27));
D6MHCLnewmod.MinRXD2 = cell2mat(rawNumericColumns(:, 28));
D6MHCLnewmod.MaxRXD2 = cell2mat(rawNumericColumns(:, 29));
D6MHCLnewmod.MeanRXD2 = cell2mat(rawNumericColumns(:, 30));
D6MHCLnewmod.SumRXD2 = cell2mat(rawNumericColumns(:, 31));
D6MHCLnewmod.StandardDeviationRXD2 = cell2mat(rawNumericColumns(:, 32));
D6MHCLnewmod.CentroidXm = cell2mat(rawNumericColumns(:, 33));
D6MHCLnewmod.CentroidYm = cell2mat(rawNumericColumns(:, 34));
D6MHCLnewmod.CentroidZm = cell2mat(rawNumericColumns(:, 35));
D6MHCLnewmod.SurfaceAream2 = cell2mat(rawNumericColumns(:, 36));
D6MHCLnewmod.BoundsXm = cell2mat(rawNumericColumns(:, 37));
D6MHCLnewmod.BoundsYm = cell2mat(rawNumericColumns(:, 38));
D6MHCLnewmod.BoundsZm = cell2mat(rawNumericColumns(:, 39));

